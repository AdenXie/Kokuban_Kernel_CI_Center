name: 1. Setup Kernel Repositories
on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: '请输入本次同步操作的 Commit 信息'
        required: true
        default: 'ci: Sync central CI files'
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - { uses: actions/checkout@v4 }
      - { run: sudo apt-get install -y jq }
      - name: Configure each kernel repository
        env:
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.inputs.commit_message }}
        run: |
          git config --global user.name "GitHub Actions Setup"
          git config --global user.email "actions@github.com"

          TARGET_BRANCHES=("main" "ksu" "mksu" "sukisuultra")
          for project_key in $(jq -r 'keys[]' ${{ github.workspace }}/configs/projects.json); do
            PROJECT_REPO=$(jq -r --arg PKEY "$project_key" '.[$PKEY].repo' ${{ github.workspace }}/configs/projects.json)
            echo "--- Processing: $PROJECT_REPO ---"
            git clone "https://x-access-token:$ADMIN_TOKEN@github.com/$PROJECT_REPO.git" "temp_kernel"
            cd temp_kernel

            REMOTE_BRANCHES=$(git branch -r | sed 's|origin/||' | grep -v 'HEAD ->')

            for branch in "${TARGET_BRANCHES[@]}"; do
              if echo "$REMOTE_BRANCHES" | grep -q "^ *${branch}$"; then
                echo "Configuring branch: $branch"
                git checkout "$branch"

                # 清理旧文件，已加入 update.sh
                rm -rf .github/workflows build*.sh update-kernelsu.yml update.sh

                # 创建新的 CI 触发器
                mkdir -p .github/workflows
                cp ${{ github.workspace }}/templates/trigger-central-build.yml.tpl .github/workflows/trigger-central-build.yml
                sed -i "s|__PROJECT_KEY__|${project_key}|g" .github/workflows/trigger-central-build.yml
                sed -i "s|__REPO_OWNER__|${{ github.repository_owner }}|g" .github/workflows/trigger-central-build.yml

                # 同步 .gitignore 文件
                echo "Syncing .gitignore..."
                cp ${{ github.workspace }}/configs/universal.gitignore ./.gitignore

                # 提交所有变动
                if [[ -n $(git status --porcelain) ]]; then
                  git add .
                  git commit -m "$COMMIT_MESSAGE (branch: $branch)"
                fi
              else
                echo "Branch '$branch' not found in $PROJECT_REPO, skipping."
              fi
            done

            echo "Pushing all updated branches..."
            git push --all

            cd .. && rm -rf temp_kernel
          done
