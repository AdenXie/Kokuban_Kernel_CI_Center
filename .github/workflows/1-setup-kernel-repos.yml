name: 1. Setup Kernel Repositories
on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: '请输入本次同步操作的 Commit 信息'
        required: true
        default: '[skip ci] ci: Sync central CI files, README and funding'
      readme_language:
        description: '选择生成的 README.md 语言'
        required: true
        type: choice
        options:
          - both # 双语
          - zh-CN # 仅中文
          - en-US # 仅英文
        default: 'both'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get install -y jq
      - name: Configure each kernel repository
        env:
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          WEBHOOK_SECRET: ${{ secrets.PUSH_SERVER_WEBHOOK_SECRET }}
          COMMIT_MESSAGE: ${{ github.event.inputs.commit_message }}
          README_LANG: ${{ github.event.inputs.readme_language }}
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions Setup"
          git config --global user.email "actions@github.com"

          for project_key in $(jq -r 'keys[]' ${{ github.workspace }}/configs/projects.json); do
            PROJECT_CONFIG=$(jq -c --arg PKEY "$project_key" '.[$PKEY]' ${{ github.workspace }}/configs/projects.json)
            PROJECT_REPO=$(echo "$PROJECT_CONFIG" | jq -r '.repo')
            LOCALVERSION_BASE=$(echo "$PROJECT_CONFIG" | jq -r '.localversion_base')
            
            echo "--- Processing: $PROJECT_REPO ---"
            git clone "https://x-access-token:$ADMIN_TOKEN@github.com/$PROJECT_REPO.git" "temp_kernel"
            cd temp_kernel

            # --- Generate README.md dynamically from projects.json ---
            README_TEMPLATE=$(cat ${{ github.workspace }}/templates/README.md.tpl)
            DEVICE_NAME_CN=$(echo "$PROJECT_CONFIG" | jq -r '.readme_placeholders.DEVICE_NAME_CN // "未知设备"')
            DEVICE_NAME_EN=$(echo "$PROJECT_CONFIG" | jq -r '.readme_placeholders.DEVICE_NAME_EN // "Unknown Device"')
            README_CONTENT=${README_TEMPLATE//__DEVICE_NAME_CN__/$DEVICE_NAME_CN}
            README_CONTENT=${README_CONTENT//__DEVICE_NAME_EN__/$DEVICE_NAME_EN}
            README_CONTENT=${README_CONTENT//__PROJECT_REPO__/$PROJECT_REPO}
            README_CONTENT=${README_CONTENT//__LOCALVERSION_BASE__/$LOCALVERSION_BASE}
            if [ "$README_LANG" == "zh-CN" ]; then
                README_CONTENT=$(echo "$README_CONTENT" | sed '/<!-- BEGIN-EN -->/,/<!-- END-EN -->/d')
            elif [ "$README_LANG" == "en-US" ]; then
                README_CONTENT=$(echo "$README_CONTENT" | sed '/<!-- BEGIN-ZH -->/,/<!-- END-ZH -->/d')
            fi
            README_CONTENT=$(echo "$README_CONTENT" | sed 's/<!-- BEGIN-.. -->//g' | sed 's/<!-- END-.. -->//g')
            echo "Generated README.md for $project_key with language: $README_LANG"

            # --- Sync CI Files to all target branches ---
            TARGET_BRANCHES=("main" "ksu" "mksu" "sukisuultra")
            REMOTE_BRANCHES=$(git branch -r | sed 's|origin/||' | grep -v 'HEAD ->')
            for branch in "${TARGET_BRANCHES[@]}"; do
              if echo "$REMOTE_BRANCHES" | grep -q "^ *${branch}$"; then
                echo "Configuring branch: $branch"
                git checkout "$branch"
                # Copy the generated README and FUNDING file to the branch
                echo "$README_CONTENT" > README.md
                mkdir -p .github
                cp ${{ github.workspace }}/.github/FUNDING.yml ./.github/FUNDING.yml
                rm -rf .github/workflows build*.sh update-kernelsu.yml update.sh
                mkdir -p .github/workflows
                cp ${{ github.workspace }}/templates/trigger-central-build.yml.tpl .github/workflows/trigger-central-build.yml
                sed -i "s|__PROJECT_KEY__|${project_key}|g" .github/workflows/trigger-central-build.yml
                sed -i "s|__REPO_OWNER__|${{ github.repository_owner }}|g" .github/workflows/trigger-central-build.yml
                cp ${{ github.workspace }}/configs/universal.gitignore ./.gitignore
                if [[ -n $(git status --porcelain) ]]; then
                  git add .
                  git commit -m "$COMMIT_MESSAGE (branch: $branch)"
                fi
              else
                echo "Branch '$branch' not found in $PROJECT_REPO, skipping file sync."
              fi
            done
            echo "Pushing all updated branches..."
            git push --all
            cd ..

            # --- Enable Sponsor Button for the repository ---
            echo "Enabling sponsor button for $PROJECT_REPO"
            gh api --method PATCH "repos/$PROJECT_REPO" -f has_sponsorships=true --silent || echo "Warning: Failed to enable sponsor button for $PROJECT_REPO. Please check token permissions."

            # --- Manage Webhook ---
            PUSH_SERVER_CONFIG_ENABLED=$(echo "$PROJECT_CONFIG" | jq -r '.push_server.enabled')
            if [ "$PUSH_SERVER_CONFIG_ENABLED" == "true" ]; then
              WEBHOOK_URL=$(echo "$PROJECT_CONFIG" | jq -r '.push_server.webhook_url')
              echo "Managing webhook for $PROJECT_REPO -> $WEBHOOK_URL"
              EXISTING_HOOK_ID=$(gh api "repos/$PROJECT_REPO/hooks" --jq ".[] | select(.config.url == \"$WEBHOOK_URL\") | .id")
              if [ -n "$EXISTING_HOOK_ID" ]; then
                echo "Webhook already exists. Updating it..."
                gh api --method PATCH "repos/$PROJECT_REPO/hooks/$EXISTING_HOOK_ID" -f 'events[]'='release' -f "config[url]=$WEBHOOK_URL" -f "config[content_type]=json" -f "config[secret]=$WEBHOOK_SECRET" > /dev/null
              else
                echo "Webhook does not exist. Creating a new one..."
                gh api --method POST "repos/$PROJECT_REPO/hooks" -f name='web' -F active=true -f 'events[]'='release' -f "config[url]=$WEBHOOK_URL" -f "config[content_type]=json" -f "config[secret]=$WEBHOOK_SECRET" > /dev/null
              fi
              echo "Webhook management complete."
            else
              echo "Push server not enabled for $PROJECT_REPO, skipping webhook management."
            fi
            
            rm -rf temp_kernel
          done
