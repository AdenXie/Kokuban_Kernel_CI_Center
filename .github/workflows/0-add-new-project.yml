# .github/workflows/0-add-new-project.yml
name: 0. Add New Kernel Project
on:
  workflow_dispatch:
    inputs:
      project_key:
        description: '项目唯一标识 (例如 s26_sm8850)'
        required: true
      core_config:
        description: |-
          核心配置 (4行, 严格按顺序):
          1. 仓库路径 (例: YuzakiKokuban/android_kernel_samsung_sm8850)
          2. Defconfig 文件名
          3. 内核版本基础字符串
          4. 刷机包文件名前缀
        type: string
        required: true
      build_config:
        description: |-
          编译选项 (3行, 严格按顺序):
          1. LTO (thin, full 或留空)
          2. 版本号方法 (param 或 file)
          3. 是否需要额外HOST环境 (true 或 false)
        type: string
        required: true
      anykernel_config:
        description: |-
          AnyKernel3 配置 (2行, 严格按顺序):
          1. AnyKernel3 仓库 URL
          2. AnyKernel3 分支名
        type: string
        required: true
      toolchain_urls:
        description: '工具链下载地址 (每个 URL 占一行)'
        type: string
        required: true
      toolchain_path_prefix:
        description: '工具链解压后的 prebuilts 相对路径 (例如 prebuilts)'
        type: string
        required: true
      toolchain_path_exports:
        description: '需要添加到 PATH 的工具链子目录 (每个路径占一行)'
        type: string
        required: true
      disable_security:
        description: '(可选) 需要禁用的三星安全特性 (每个特性占一行)'
        type: string
        required: false

jobs:
  add-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Install yq and jq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get install -y jq

      - name: Update Project Files
        env:
          INPUT_PROJECT_KEY: ${{ github.event.inputs.project_key }}
          INPUT_CORE_CONFIG: ${{ github.event.inputs.core_config }}
          INPUT_BUILD_CONFIG: ${{ github.event.inputs.build_config }}
          INPUT_AK3_CONFIG: ${{ github.event.inputs.anykernel_config }}
          INPUT_TOOLCHAIN_URLS: ${{ github.event.inputs.toolchain_urls }}
          INPUT_TOOLCHAIN_PATH_PREFIX: ${{ github.event.inputs.toolchain_path_prefix }}
          INPUT_TOOLCHAIN_PATH_EXPORTS: ${{ github.event.inputs.toolchain_path_exports }}
          INPUT_DISABLE_SECURITY: ${{ github.event.inputs.disable_security }}
        run: |
          # --- Parse Inputs ---
          # Core Config
          REPO=$(echo "$INPUT_CORE_CONFIG" | sed -n '1p' | xargs)
          DEFCONFIG=$(echo "$INPUT_CORE_CONFIG" | sed -n '2p' | xargs)
          LOCALVERSION_BASE=$(echo "$INPUT_CORE_CONFIG" | sed -n '3p' | xargs)
          ZIP_NAME_PREFIX=$(echo "$INPUT_CORE_CONFIG" | sed -n '4p' | xargs)
          
          # Build Config
          LTO=$(echo "$INPUT_BUILD_CONFIG" | sed -n '1p' | xargs)
          VERSION_METHOD=$(echo "$INPUT_BUILD_CONFIG" | sed -n '2p' | xargs)
          EXTRA_HOST_ENV=$(echo "$INPUT_BUILD_CONFIG" | sed -n '3p' | xargs)

          # AnyKernel Config
          ANYKERNEL_REPO=$(echo "$INPUT_AK3_CONFIG" | sed -n '1p' | xargs)
          ANYKERNEL_BRANCH=$(echo "$INPUT_AK3_CONFIG" | sed -n '2p' | xargs)

          # Multiline to JSON arrays
          TOOLCHAIN_URLS_JSON=$(echo "$INPUT_TOOLCHAIN_URLS" | jq -R . | jq -s .)
          TOOLCHAIN_PATH_EXPORTS_JSON=$(echo "$INPUT_TOOLCHAIN_PATH_EXPORTS" | jq -R . | jq -s .)
          
          if [ -n "$INPUT_DISABLE_SECURITY" ]; then
            DISABLE_SECURITY_JSON=$(echo "$INPUT_DISABLE_SECURITY" | jq -R . | jq -s .)
          else
            DISABLE_SECURITY_JSON="[]"
          fi

          # --- Update Files ---
          # Build the new project JSON object
          NEW_PROJECT_JSON=$(jq -n \
            --arg repo "$REPO" \
            --arg defconfig "$DEFCONFIG" \
            --arg localversion_base "$LOCALVERSION_BASE" \
            --arg lto "$LTO" \
            --argjson supported_ksu '["sukisuultra", "mksu", "ksu"]' \
            --argjson toolchain_urls "$TOOLCHAIN_URLS_JSON" \
            --arg toolchain_path_prefix "$INPUT_TOOLCHAIN_PATH_PREFIX" \
            --argjson toolchain_path_exports "$TOOLCHAIN_PATH_EXPORTS_JSON" \
            --arg anykernel_repo "$ANYKERNEL_REPO" \
            --arg anykernel_branch "$ANYKERNEL_BRANCH" \
            --arg zip_name_prefix "$ZIP_NAME_PREFIX" \
            --arg version_method "$VERSION_METHOD" \
            --argjson extra_host_env $EXTRA_HOST_ENV \
            --argjson disable_security "$DISABLE_SECURITY_JSON" \
            '{
              repo: $repo,
              defconfig: $defconfig,
              localversion_base: $localversion_base,
              lto: $lto,
              supported_ksu: $supported_ksu,
              toolchain_urls: $toolchain_urls,
              toolchain_path_prefix: $toolchain_path_prefix,
              toolchain_path_exports: $toolchain_path_exports,
              anykernel_repo: $anykernel_repo,
              anykernel_branch: $anykernel_branch,
              zip_name_prefix: $zip_name_prefix,
              version_method: $version_method,
              extra_host_env: $extra_host_env,
              disable_security: $disable_security
            }')

          # Update projects.json
          jq --arg key "$INPUT_PROJECT_KEY" \
             --argjson value "$NEW_PROJECT_JSON" \
             '. + {($key): $value}' \
             configs/projects.json > tmp.json && mv tmp.json configs/projects.json
          echo "✅ Updated configs/projects.json"

          # Update 2-update-kernelsu.yml
          yq e '.on.workflow_dispatch.inputs.project.options += ["'"$INPUT_PROJECT_KEY"'"]' -i .github/workflows/2-update-kernelsu.yml
          echo "✅ Updated .github/workflows/2-update-kernelsu.yml"

          # Update 4-universal-build.yml
          yq e '.on.workflow_dispatch.inputs.project.options += ["'"$INPUT_PROJECT_KEY"'"]' -i .github/workflows/4-universal-build.yml
          echo "✅ Updated .github/workflows/4-universal-build.yml"

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add configs/projects.json .github/workflows/2-update-kernelsu.yml .github/workflows/4-universal-build.yml
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "feat: Add new project '${{ github.event.inputs.project_key }}' via automated workflow"
            git push
            echo "🚀 Changes have been committed and pushed."
          else
            echo "No changes to commit."
          fi
          
      - name: Display Next Steps
        run: |
          REPO_URL=$(echo "${{ github.event.inputs.core_config }}" | sed -n '1p' | xargs)
          echo "========================================================================"
          echo "🎉 新项目 '${{ github.event.inputs.project_key }}' 已成功添加到 CI 中心！"
          echo ""
          echo "下一步操作:"
          echo "1. 访问新的内核仓库: https://github.com/$REPO_URL"
          echo "   在 Settings -> Secrets and variables -> Actions 中添加名为 'CI_TOKEN' 的 Secret，"
          echo "   其值为你的 Personal Access Token。"
          echo ""
          echo "2. 返回本仓库 (Kokuban_Kernel_CI_Center) 的 Actions 页面，"
          echo "   运行 '1. Setup Kernel Repositories' 工作流，为新仓库一键配置好触发器。"
          echo "========================================================================"

